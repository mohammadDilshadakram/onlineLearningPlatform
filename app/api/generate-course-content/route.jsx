import { NextResponse } from "next/server";
import { ai } from "../generate-course-layout/route";
import axios from "axios";
import { db } from "@/config/db";
import { coursesTable } from "@/config/schema";
import { eq } from "drizzle-orm";

const PROMPT = `Generate JSON content based on the chapter and topic as described below.
Return ONLY a valid JSON object â€” do NOT include any extra text, explanation, markdown, or formatting.

Schema:
{
  "chapterName": "string",
  "topics": [
    {
      "topic": "string",
      "content": "string (can include HTML)"
    }
  ]
}

Respond with only one valid JSON object.

User Input:
`;



export async  function POST(req) {

    const { courseJson,courseTitle,courseId } = await req.json();

    const promises=courseJson?.chapters?.map(async (chapter) => {
          const config = {
    responseMimeType: 'text/plain',
  };
  const model = 'gemini-2.0-flash';
  const contents = [
    {
      role: 'user',
      parts: [
        {
          text: PROMPT + JSON.stringify(chapter),
        },
      ],
    },
  ];

  const response = await ai.models.generateContent({
    model,
    config,
    contents,
  });
  console.log(response.candidates[0].content.parts[0].text);
  const RawResp = response.candidates[0].content.parts[0].text
  let JSONResp;
  try {
    const RawJson = RawResp.match(/{[\s\S]*}/)?.[0];
    if (!RawJson) throw new Error("Could not extract valid JSON from the response");
    JSONResp = JSON.parse(RawJson);
  } catch (err) {
    console.error("Failed to parse model response:", RawResp);
    throw new Error("Invalid JSON generated by AI: " + err.message);
  }

  const youtubeData = await GetYoutubeVideo(chapter?.chapterName);

  return {
    youtubeVideo:youtubeData,
    courseData:JSONResp
  };
})

    const CourseContent=await Promise.all(promises);

    //save to db
    const dbResp = await db.update(coursesTable).set({
  courseContent: JSON.stringify(CourseContent)
}).where(eq(coursesTable.cid, courseId));


    return NextResponse.json({
        courseName: courseTitle,
        CourseContent:CourseContent
    })

}


const YOUTUBE_BASE_URL = 'https://www.googleapis.com/youtube/v3/search';

const GetYoutubeVideo = async (topic) => {
  const params = {
    part: 'snippet',
    q: topic,
    maxResults: 4,
    type: 'video',
    key: process.env.YOUTUBE_API_KEY, // Youtube API KEY
  };

  const resp = await axios.get(YOUTUBE_BASE_URL, { params });
  const youtubeVideoListResp= resp.data.items;
  const youtubeVideoList = []
  youtubeVideoListResp.forEach(item=>{
    const data={
      videoId: item.id?.videoId,
      title: item?.snippet?.title,
    }
    youtubeVideoList.push(data);
  })
  console.log("youtube video list",youtubeVideoList);
  return youtubeVideoList;
};
